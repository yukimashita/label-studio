{"version":3,"file":"editor_src_env_production_js.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://labelstudio/../editor/src/env/production.js"],"sourcesContent":["import External from \"../core/External\";\nimport Messages from \"../utils/messages\";\n\nfunction getData(task) {\n  if (task && task.data) {\n    return {\n      ...task,\n      data: JSON.stringify(task.data),\n    };\n  }\n\n  return task;\n}\n\nfunction getState(task) {\n  return {\n    annotations: task?.annotations,\n    completions: task?.completions,\n    predictions: task?.predictions,\n  };\n}\n\n/**\n * LS will render in this part\n */\nfunction rootElement(element) {\n  let root;\n\n  if (typeof element === \"string\") {\n    root = document.getElementById(element);\n  } else {\n    root = element;\n  }\n\n  root.innerHTML = \"\";\n\n  return root;\n}\n\n/**\n * Function to configure application with callbacks\n * @param {object} params\n */\nfunction configureApplication(params) {\n  // callbacks for back compatibility\n  const osCB = params.submitAnnotation || params.onSubmitAnnotation;\n  const ouCB = params.updateAnnotation || params.onUpdateAnnotation;\n  const odCB = params.deleteAnnotation || params.onDeleteAnnotation;\n\n  const options = {\n    // communication with the server\n    // fetch: params.fetch || Requests.fetcher,\n    // patch: params.patch || Requests.patch,\n    // post: params.post || Requests.poster,\n    // remove: params.remove || Requests.remover,\n\n    // communication with the user\n    settings: params.settings || {},\n    messages: { ...Messages, ...params.messages },\n\n    // callbacks and event handlers\n    onSubmitAnnotation: params.onSubmitAnnotation ? osCB : External.onSubmitAnnotation,\n    onUpdateAnnotation: params.onUpdateAnnotation ? ouCB : External.onUpdateAnnotation,\n    onDeleteAnnotation: params.onDeleteAnnotation ? odCB : External.onDeleteAnnotation,\n    onSkipTask: params.onSkipTask ? params.onSkipTask : External.onSkipTask,\n    onUnskipTask: params.onUnskipTask ? params.onUnskipTask : External.onUnskipTask,\n    onSubmitDraft: params.onSubmitDraft,\n    onPresignUrlForProject: params.onPresignUrlForProject,\n    onTaskLoad: params.onTaskLoad || External.onTaskLoad,\n    onLabelStudioLoad: params.onLabelStudioLoad || External.onLabelStudioLoad,\n    onEntityCreate: params.onEntityCreate || External.onEntityCreate,\n    onEntityDelete: params.onEntityDelete || External.onEntityDelete,\n    onGroundTruth: params.onGroundTruth || External.onGroundTruth,\n    onSelectAnnotation: params.onSelectAnnotation || External.onSelectAnnotation,\n    onAcceptAnnotation: params.onAcceptAnnotation || External.onAcceptAnnotation,\n    onRejectAnnotation: params.onRejectAnnotation || External.onRejectAnnotation,\n    onStorageInitialized: params.onStorageInitialized || External.onStorageInitialized,\n    onNextTask: params.onNextTask || External.onNextTask,\n    onPrevTask: params.onPrevTask || External.onPrevTask,\n\n    // other settings aka flags\n    forceAutoAnnotation: params.forceAutoAnnotation ?? false,\n    forceAutoAcceptSuggestions: params.forceAutoAcceptSuggestions ?? false,\n  };\n\n  return options;\n}\n\nexport default { getData, getState, rootElement, configureApplication };\n"],"names":[],"sourceRoot":""}